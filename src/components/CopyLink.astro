---
export interface Props {
  url?: URL;
  className?: string;
}
const currentUrl = Astro.url;

const { url = currentUrl, className } = Astro.props;

const LinkIcon = `<svg
  xmlns="http://www.w3.org/2000/svg"
  stroke-linecap="round"
  stroke-linejoin="round"
  class="icon-tabler"
  ><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M9 15l6 -6"
  ></path><path d="M11 6l.463 -.536a5 5 0 0 1 7.071 7.072l-.534 .464"
  ></path><path
    d="M13 18l-.397 .534a5.068 5.068 0 0 1 -7.127 0a4.972 4.972 0 0 1 0 -7.071l.524 -.463"
  ></path></svg
>`;

const offStyle =
  "transition: all 0.3s ease 0s; visibility: hidden; margin-bottom: 0px; opacity: 0;";
const onStyle =
  "transition: all 0.3s ease 0s; visibility: visible; margin-bottom: 5px; opacity: 1;";
---

<button
  id="copy-link"
  title="Copy link"
  class=`group inline-block hover:text-skin-accent ${className}`
>
  <Fragment set:html={LinkIcon} />
  <span class="sr-only">Copy link</span>
</button>

<div
  class="z-999 fixed left-0 top-16 flex w-full items-center justify-center px-5"
>
  <button
    id="alert"
    class="rounded bg-[rgba(10,10,10,0.95)] px-4 py-1 text-white shadow"
    style={offStyle}>Copied to clipboard</button
  >
</div>

<script is:inline define:vars={{ url, onStyle, offStyle }}>
  const copyLink = async () => {
    await navigator.clipboard.writeText(url);
  };

  const handleClick = async () => {
    await copyLink();

    const alert = document.getElementById("alert");

    if (!alert) {
      return;
    }

    alert.style = onStyle;

    const handleAlert = () => {
      alert.style = offStyle;
      alert.removeEventListener("click", handleAlert);
    };

    alert.addEventListener("click", handleAlert);
    setTimeout(handleAlert, 2000);
  };

  const copyLinkButton = document.getElementById("copy-link");
  copyLinkButton.addEventListener("click", handleClick);
</script>
