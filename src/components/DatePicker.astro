---
import {
  generateDates,
  findInitialDayOfYear,
  generateDataForCells,
  getLabels,
} from "@utils/date-picker";

export interface Props {
  years: number[];
  selectedYear?: number;
  activeDates: string[];
}

const { years, selectedYear, activeDates } = Astro.props;

const _selectedYear = selectedYear ?? years[0];

const months = Array.from({ length: 12 }, (_, i) => i + 1);
const dates = generateDates(months, _selectedYear);

const dataForCells = generateDataForCells(dates, activeDates, _selectedYear);

const initalDay = findInitialDayOfYear(_selectedYear);

const MONTHS_LABEL = getLabels("months");
const WEEKDAYS_LABEL = getLabels("weekdays");
---

<div>
  <ul class="years">
    {
      years.map(year => (
        <li class={year === _selectedYear ? "selected" : ""}>
          <a href={`/logs/${year}`}>{year}</a>
        </li>
      ))
    }
  </ul>

  <div class="graph">
    <ul class="months">
      {MONTHS_LABEL.map(month => <li>{month}</li>)}
    </ul>
    <ul class="days">
      {WEEKDAYS_LABEL.map(weekday => <li>{weekday}</li>)}
    </ul>
    <ul class="squares">
      {Array.from({ length: initalDay }).map(() => <li />)}
      {
        dataForCells.map(({ tooltip, isActive, slug, weekIndex }) =>
          isActive ? (
            <a
              href={`/logs/${slug}`}
              class="bg-skin-active-cell"
              data-tooltip={tooltip}
              style={`--week-index: ${weekIndex};`}
            >
              <li />
            </a>
          ) : (
            <li class="bg-skin-inactive-cell" />
          )
        )
      }
    </ul>
  </div>
</div>

<style>
  :root {
    --square-size: 10px;
    --square-gap: 3px;
    --week-width: calc(var(--square-size) + var(--square-gap));
  }

  .months {
    grid-area: months;
  }
  .days {
    grid-area: days;
  }
  .squares {
    grid-area: squares;
  }

  .squares a {
    position: relative;
  }

  /* tooltip for date */
  .squares a:hover::before {
    content: attr(data-tooltip);
    position: absolute;
    top: -2em;
    left: calc(var(--week-index) * (var(--week-width)) * -1);
    white-space: nowrap;
    padding: 2px 4px;
    z-index: 100;
    font-size: 12px;
    border-radius: 3px;

    @apply bg-skin-cell-tooltip text-white;
  }

  .graph {
    width: 100%;
    margin: 0 auto;
    overflow-x: scroll;
    display: inline-grid;
    grid-template-areas:
      "empty months"
      "days squares";
    grid-template-columns: auto 1fr;
    grid-gap: 4px;
  }

  .months {
    display: grid;
    grid-template-columns:
      calc(var(--week-width) * 5) /* Jan */
      calc(var(--week-width) * 4) /* Feb */
      calc(var(--week-width) * 4) /* Mar */
      calc(var(--week-width) * 5) /* Apr */
      calc(var(--week-width) * 4) /* May */
      calc(var(--week-width) * 4) /* Jun */
      calc(var(--week-width) * 5) /* Jul */
      calc(var(--week-width) * 4) /* Aug */
      calc(var(--week-width) * 4) /* Sep */
      calc(var(--week-width) * 5) /* Oct */
      calc(var(--week-width) * 4) /* Nov */
      calc(var(--week-width) * 5) /* Dec */;
  }

  .days,
  .squares {
    display: grid;
    grid-gap: var(--square-gap);
    grid-template-rows: repeat(7, var(--square-size));
  }

  .squares {
    grid-auto-flow: column;
    grid-auto-columns: var(--square-size);
  }

  .squares a,
  .squares li {
    @apply rounded-sm;
  }

  .graph {
    padding: 16px 8px 8px 8px;
    @apply rounded border border-skin-line;
  }

  .days li:nth-child(odd) {
    visibility: hidden;
  }

  .graph ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .graph li {
    list-style: none;
    padding: 0;
    margin: 0;
    font-size: 12px;
    font-weight: 400;
    line-height: 10px;
  }
  .years {
    @apply my-4 flex space-x-2;
  }
  .years > li.selected {
    @apply underline decoration-wavy decoration-2 underline-offset-4;
  }
</style>
